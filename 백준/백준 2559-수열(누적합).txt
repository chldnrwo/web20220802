import java.util.Scanner;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;

public class Main {
	    static int[] arr;
	    static Integer[] arrS;
	    static Integer[] arrS2;
	    static int M;
	public static void main(String[] args) throws NumberFormatException, IOException {
		Scanner in = new Scanner(System.in);
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		//int N = Integer.parseInt(br.readLine());
		StringBuilder sb = new StringBuilder();
		//String str = sb.toString();
		//String[] arr = new String[a.length()];
		int N = in.nextInt();
		M = in.nextInt();
		arr = new int[N+1];
		arrS = new Integer[N+1];
		arrS2 = new Integer[N-M+1];
		for(int i=1;i<N+1;i++) {
			arr[i] = in.nextInt();
		}
		arrS[0]=arr[0];
		d(N);
		//System.out.println(Arrays.toString(arr));
		//System.out.println(Arrays.toString(arrS));
		
		for(int i=0;i<arrS2.length;i++) {
			e(i);
		}
		//System.out.println(Arrays.toString(arrS2));
		Arrays.sort(arrS2);
		System.out.println(arrS2[arrS2.length-1]);
		
	}
	
	public static int d(int depth){
		if(arrS[depth]==null) {
			arrS[depth]=d(depth-1)+arr[depth]; 
		}
		
		
		return arrS[depth];
	}
	
	public static int e(int depth){
		if(arrS2[depth]==null) {
			arrS2[depth]=d(depth+M) - d(depth); 
		}
		
		
		return arrS2[depth];
	}
	
}

//그냥 풀면 스트링빌더 써도 시간초과난다
//누적합으로 풀이, 동적계획과 비슷함
//1. 앞문제에서 쓴 누적합 쓰는 방식 
//2. 새 함수 짜서 arrS 안거치고 바로 누적합 저장하는 방식 
//2번 쓸 경우 내가 생각한대로면 누적합을 안쓰게 되서 결국 통과 안됨 그냥 M합 배열 만들고 소트하는거라
//arrS2배열은 맨앞에 0못둠 배열의 모든 값이 마이너스일 가능성 때문에
//최소값에서 문제는 안터짐 최대값은 대입이 힘듬
