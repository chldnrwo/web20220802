import java.util.Scanner;
import java.util.StringTokenizer;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Deque;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;

public class Main {
		static StringBuilder sb = new StringBuilder();
		static int[][] dp;
		static int[][] arr;
		static int[] sum;
	public static void main(String[] args) throws Exception {
		Scanner in = new Scanner(System.in);
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
			//입력값 및 배열 생성
		int N = in.nextInt();

			arr = new int[N+1][2];
			dp = new int[N+1][N+1];
			
			for(int b=1;b<N+1;b++) {
				arr[b][0]=in.nextInt();
				arr[b][1]=in.nextInt();
			}
			arr[0][1]=arr[1][0];
			//rule1 = dp[i][i] = 0
			//dp[i][i+1] = dp[i][i] + dp[i+1][i+1] + arr[i-1][1]*arr[k][1]*arr[i+1][1]
			// = 0 + 0 + arr[i-1][1]*arr[i][1]*arr[i+1][1]
			//밑 준비 1 누적합 sum 만들어 놓기 - 최종값이 매번 달라서 sum이 도움이 안됨
			//밑 준비 2 dp 2차원 배열 채울수 있는거 미리 채우기
			for(int b = 1; b < N; b++) {
				dp[b][b+1]=arr[b-1][1]*arr[b][1]*arr[b+1][1];
			}
			
			//dp[i][j] = Math.min(dp[i][j], dp[i][k]+dp[k+1][j]+arr[i-1][1]*arr[k][1]*arr[j][1]);
			for(int margin=1;margin<=N;margin++) {
				for(int i=1;margin+i<=N;i++) {
					int j=margin+i;
					dp[i][j] = Integer.MAX_VALUE;
					for(int k=i;k<j;k++) {
						dp[i][j] = Math.min(dp[i][j], dp[i][k]+dp[k+1][j]
								+arr[i-1][1]*arr[k][1]*arr[j][1]);
					}
				}
			}
//			for(int i=0;i<N+1;i++) {
//				for(int j=0;j<N+1;j++) {
//					System.out.print(dp[i][j]+" ");
//				}
//				System.out.println();
//			}
			
			
		
		System.out.println(dp[1][N]);
	}
	
	
}

//