import java.util.Scanner;
import java.util.Stack;
import java.util.StringTokenizer;

import javax.script.ScriptEngine;
import javax.script.ScriptEngineFactory;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Deque;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

public class Main {
	static StringBuilder sb = new StringBuilder();
	static long modN = 1_000_000_007; 
	static long[][] ori = {{1, 1}, {1, 0}};
	public static void main(String[] args) throws Exception {
		Scanner in = new Scanner(System.in);
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		//StringTokenizer st = new StringTokenizer(br.readLine());
		
		long N = in.nextLong();
		 
		
//		for(int i=0;i<N;i++) {
//			System.out.print(pibo(i)+" ");
//		}
		//System.out.println(pibo(N));
		long[][] result = partition(ori, N);
		System.out.println(result[0][1]);
	}
	
	public static long[][] partition(long[][] a, long m) {
		if(m==1) {
			for(int i=0;i<2;i++) {
				for(int j=0;j<2;j++) {
					a[i][j]=(a[i][j]%modN);
				}
			}
			return a;
		}
		
		long[][] tp = partition(a, m/2);
		
		tp = mul(tp,tp);
		if(m%2==1) {
			tp = mul(tp, ori);
		}
		return tp;
	}
	
	public static long[][] mul(long[][] arr1, long[][] arr2){
		long[][] arr3=new long[2][2];
		for(int i=0;i<2;i++) {
			for(int j=0;j<2;j++) {
				for(int k=0;k<2;k++) {
					arr3[i][j]+=arr1[i][k]*arr2[k][j];
					arr3[i][j]%=modN;
				}
			}
		}
		
		
		return arr3;
	}
	
	
}

// N 넣었을 때 12,21이 답
// 선형대수 모르면 못푸는 문제
// 행렬제곱 되살리기