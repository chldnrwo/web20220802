import java.util.Scanner;
import java.util.Stack;
import java.util.StringTokenizer;

import javax.script.ScriptEngine;
import javax.script.ScriptEngineFactory;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Deque;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

public class Main {
	static StringBuilder sb = new StringBuilder();
	static int cntm;
	static int cnt0;
	static int cnt1;
	static int[][] arr;

	public static void main(String[] args) throws Exception {
		Scanner in = new Scanner(System.in);
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;

		int N = Integer.parseInt(br.readLine());
		arr = new int[N][N];
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < N; j++) {
				arr[i][j] = Integer.parseInt(st.nextToken());
			}
		}

//		for(int i=0;i<N;i++) {
//			for(int j=0;j<N;j++) {
//				System.out.print(arr[i][j]+" ");
//			}
//			System.out.println();
//		}
		d(0, 0, N);
		sb.append(cntm + "\n");
		sb.append(cnt0 + "\n");
		sb.append(cnt1 + "\n");
		System.out.println(sb.toString());
	}

	public static void d(int col,int row, int size) {
		if(check(col,row,size)) {
			if(arr[col][row]==0) {
				cnt0++;
			}else if(arr[col][row]==1){
				cnt1++;
			}else {
				cntm++;
			}
			return;
		}
		
		int sizeN = size/3;
		
		d(col, row, sizeN);
		d(col, row+sizeN, sizeN);
		d(col, row+sizeN*2, sizeN);
		
		d(col+sizeN, row, sizeN);
		d(col+sizeN, row+sizeN, sizeN);
		d(col+sizeN, row+sizeN*2, sizeN);
		
		d(col+sizeN*2, row, sizeN);
		d(col+sizeN*2, row+sizeN, sizeN);
		d(col+sizeN*2, row+sizeN*2, sizeN);
	}

	public static boolean check(int col,int row, int size) {
		int ruler = arr[col][row];
		for (int i = col; i < col+size; i++) {
			for (int j = row; j < row+size; j++) {
				if (arr[i][j] != ruler) {
					return false;
				}
			}
		}
		return true;
	}
}


// review 굳이 array를 만들어서 옮길 필요는 없었다
// 1/3가까이 시간줄임
