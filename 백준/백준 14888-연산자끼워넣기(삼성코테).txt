import java.util.Scanner;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;

public class Main {
	 	static int N;
	 	static int[] num;
	 	static int[] op;
	 	static List<Integer> list = new ArrayList<Integer>();
	public static void main(String[] args) throws NumberFormatException, IOException {
		Scanner in = new Scanner(System.in);
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		//int N = Integer.parseInt(br.readLine());
		StringBuilder sb = new StringBuilder();
		//String str = sb.toString();
		//String[] arr = new String[a.length()];
		N = in.nextInt();
		num = new int[N];
		op = new int[4];
		for(int i=0;i<N;i++) {
			num[i] = in.nextInt(); 
		}
		for(int i=0;i<4;i++) {
			op[i] = in.nextInt(); 
		}
		
		d(num[0],0);
		Collections.sort(list);
		System.out.println(list.get(list.size()-1));
		System.out.println(list.get(0));
	}
	
	public static void d(int result,int depth){ 
		if(depth==N-1) {
			list.add(result);
			return;
		}
		
		
		for(int i=0;i<4;i++) {
			if(op[i]!=0) {
				op[i]--;
				if(i==0) {
					
					d(result+num[depth+1], depth+1);
				}
				else if(i==1) {
					
					d(result-num[depth+1], depth+1);
				}
				else if(i==2) {

					d(result*num[depth+1], depth+1);
				}
				else if(i==3) {
					d(result/num[depth+1], depth+1);
				}
				op[i]++;
			}
		}
	}
	
	
}

//