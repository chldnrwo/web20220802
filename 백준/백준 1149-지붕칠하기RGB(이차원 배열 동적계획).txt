import java.util.Scanner;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;

public class Main {
	 static int N;
	 static int[][] arrSave;
	 static int[][] arr;
	 static int min;
	public static void main(String[] args) throws NumberFormatException, IOException {
		Scanner in = new Scanner(System.in);
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		//int N = Integer.parseInt(br.readLine());
		StringBuilder sb = new StringBuilder();
		//String str = sb.toString();
		//String[] arr = new String[a.length()];
		N = in.nextInt();
		arr = new int[N][3];
		arrSave = new int[N][3];
		for(int i=0;i<N;i++) {
			for(int j=0;j<3;j++) {
				arr[i][j]=in.nextInt();
			}
		}
		arrSave[0][0] = arr[0][0];
		arrSave[0][1] = arr[0][1];
		arrSave[0][2] = arr[0][2];
		System.out.println(Math.min(d(N-1,0),Math.min(d(N-1,1), d(N-1,2))));
		
		
	}
	
	public static int d(int depth, int color){ 
		if(arrSave[depth][color]==0) {
			if(color==0) {
				arrSave[depth][color] = Math.min(d(depth-1, 1), d(depth-1, 2))+arr[depth][0];
			}
			else if(color==1) {
				arrSave[depth][color] = Math.min(d(depth-1, 0), d(depth-1, 2))+arr[depth][1];	
			}
			else if(color==2) {
				arrSave[depth][color] = Math.min(d(depth-1, 0), d(depth-1, 1))+arr[depth][2];
			}
		}
		
		return arrSave[depth][color];
	}
	
	
}

//red green blue 에 각각 최소값 저장하는 방식
//연속합을 3중으로 하고 최소값비교