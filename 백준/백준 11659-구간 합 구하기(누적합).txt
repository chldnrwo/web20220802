import java.util.Scanner;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;

public class Main {
	    static int[] arr;
	    static Integer[] arrS;
	public static void main(String[] args) throws NumberFormatException, IOException {
		Scanner in = new Scanner(System.in);
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		//int N = Integer.parseInt(br.readLine());
		StringBuilder sb = new StringBuilder();
		//String str = sb.toString();
		//String[] arr = new String[a.length()];
		int N = in.nextInt();
		int M = in.nextInt();
		arr = new int[N+1];
		arrS = new Integer[N+1];
		for(int i=1;i<N+1;i++) {
			arr[i] = in.nextInt();
		}
		arrS[0]=arr[0];
		d(N);
		
		for(int i=0;i<M;i++) {
			sb.append(Math.abs(arrS[in.nextInt()-1] - arrS[in.nextInt()])+"\n");
		}
		System.out.println(sb.toString());
	}
	
	public static int d(int depth){
		if(arrS[depth]==null) {
			arrS[depth]=d(depth-1)+arr[depth]; 
		}
		
		
		return arrS[depth];
	}
	
	
}

//그냥 풀면 스트링빌더 써도 시간초과난다
//누적합으로 풀이, 동적계획과 비슷함