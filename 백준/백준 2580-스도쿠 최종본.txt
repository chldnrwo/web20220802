import java.util.Scanner;
import java.util.StringTokenizer;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

public class Main {
	 static int N;
	 static int[][] sdo = new int[9][9];
	 static int cnt=0;
	 static List<Integer> listI = new ArrayList<Integer>();
	 static List<Integer> listJ = new ArrayList<Integer>();
	 static StringBuilder sb = new StringBuilder();
	 
	 public static void main(String[] args) throws NumberFormatException, IOException {
		 
		Scanner in = new Scanner(System.in);
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		//int N = Integer.parseInt(br.readLine());
		StringBuilder sb = new StringBuilder();
		//String str = sb.toString();
		//String[] arr = new String[a.length()];
		
		
		for(int i=0;i<9;i++) {
			StringTokenizer st = new StringTokenizer(br.readLine(), " ");
			for(int j=0;j<9;j++) {
				sdo[i][j]=Integer.parseInt(st.nextToken());
				if(sdo[i][j]==0) {
					cnt++;
					listI.add(i);
					listJ.add(j);
				}
			}
		}
		
		//함수
		d(0);
		
	}
	
	public static void d(int depth){ 
		if(depth==cnt) {
			for(int i=0;i<9;i++) {
				for(int j=0;j<9;j++) {
					sb.append(sdo[i][j]+" ");
				}
				sb.append("\n");
			}
			System.out.println(sb);
			
			System.exit(0);
		}
		
		
		for(int k=1;k<10;k++) {
			if(pos(listI.get(depth),listJ.get(depth), k)) {
				sdo[listI.get(depth)][listJ.get(depth)] = k;
				d(depth+1);
				sdo[listI.get(depth)][listJ.get(depth)] = 0;
			}
			
		}
		
	}
	
	public static boolean pos(int row, int col, int value) {
		
		// 같은 행에 있는 원소들 중 겹치는 열 원소가 있는지 검사
		for (int i = 0; i < 9; i++) {
			if (sdo[row][i] == value) {
				return false;
			}
		}
 
		// 같은 열에 있는 원소들 중 겹치는 행 원소가 있는지 검사
		for (int i = 0; i < 9; i++) {
			if (sdo[i][col] == value) {
				return false;
			}
		}
 
		// 3*3 칸에 중복되는 원소가 있는지 검사
		int set_row = (row / 3) * 3; // value가 속한 3x3의 행의 첫 위치
		int set_col = (col / 3) * 3; // value가 속한 3x3의 열의 첫 위치
 
		for (int i = set_row; i < set_row + 3; i++) {
			for (int j = set_col; j < set_col + 3; j++) {
				if (sdo[i][j] == value) {
					return false;
				}
			}
		}
		
		return true; // 중복되는 것이 없을 경우 true 반환
	}
	
	
}

//솔루션 :
//532ms
//sol(백트래킹 함수)+ori(check함수) :
//(87퍼에서 시간초과)
//ori(백트래킹 함수)+sol(check함수) :
//600ms
//오리지널 :
//(83퍼에서 시간초과)
//
//결론 : 
//check 함수를 map으로 짠게 문제
//백트래킹 함수는 문제가 없었다.