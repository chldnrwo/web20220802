import java.util.Scanner;
import java.util.StringTokenizer;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;

public class Main {
	    static Integer[][] arrS; 
	    static String str;
	public static void main(String[] args) throws NumberFormatException, IOException {
		Scanner in = new Scanner(System.in);
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		StringBuilder sb = new StringBuilder();
		
		str = br.readLine();
		int N = Integer.parseInt(br.readLine());
		arrS = new Integer[26][str.length()+1];
		for(int i=0;i<26;i++){
			arrS[i][0]=0;
			arrS[i][1]=0;
		}
		arrS[str.charAt(0)-'a'][1]=1;
		
		
	
		for(int i=0;i<N;i++) {
			st = new StringTokenizer(br.readLine());
			char ch = st.nextToken().charAt(0);
			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());
			
			d(ch-97, str.length());
			int c = arrS[ch-97][b+1]-arrS[ch-97][a];
			sb.append(c+"\n");
		}      
		System.out.println(sb.toString());
	}
	
	public static int d(int ch, int num){
		if(arrS[ch][num]==null) {
			if(str.charAt(num-1)-97-ch==0) {
				arrS[ch][num] = d(ch,num-1) + 1;
			}else {
				arrS[ch][num] = d(ch,num-1);
			}
		}
		
		return arrS[ch][num];
	}
	
}

//최소값은 오류남
/* 반례
	seungjaehwang
	4
	a 0 5 
	e 1 7 
	h 6 10
	g 0 12
*/
// 기준이 되는 소문자가 바뀌면 arrS배열도 초기화
// 버퍼리더로 변경
// 26가지를 미리 만들어두는게 아니라 26가지가 들어갈 칸을 미리 만들고
// 채우는 것  a->b->c->a 값이 들어올때 a 누적합을 다시 안만들어도 되게
//  charAt쓰면 문자르 안쪼개둬도 된다
// 2차원 배열쓰면 2배 빨라지긴하는데 여전히 50점