import java.util.Scanner;
import java.util.StringTokenizer;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Deque;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;

public class Main {
		static StringBuilder sb = new StringBuilder();
		static int N,M;
		static int[] mem, price;
		static Integer[][] dp;
	public static void main(String[] args) throws Exception {
		Scanner in = new Scanner(System.in);
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = in.nextInt();
		M = in.nextInt();
		mem = new int[N+1];
		price = new int[N+1];
		int sum=0;
		for(int i=1;i<N+1;i++) {
			mem[i]=in.nextInt();
			sum+=mem[i];
		}
		int sum2 = 0;
		for(int i=1;i<N+1;i++) {
			price[i]=in.nextInt();
			sum2+=price[i];
		}
		int memory = sum-M;
		dp = new Integer[N+1][memory+1];
		
		for(int i=0;i<memory+1;i++) {
			dp[0][i]=0;
		}
		for(int i=0;i<N+1;i++) {
			dp[i][0]=0;
		}
		System.out.println(sum2-dp(N, memory));
//		for(int i = 0;i<N+1;i++ ) {
//			for(int j=0;j<memory+1;j++) {
//				System.out.print(dp[i][j]+" ");
//			}
//			System.out.println();
//		}
	}
	
	public static int dp(int depth, int memory) {
		if(dp[depth][memory]==null) {
			for(int i=1;i<depth+1;i++) {
				for(int j=1;j<memory+1;j++) {
					if(mem[i]>j) {
						dp[i][j]=dp(i-1, j);
					}else {
						dp[i][j]=Math.max(dp(i-1,j),dp(i-1,j-mem[i])+price[i]);
					}
				}
			}
		}
		
		return dp[depth][memory];
	}
	
	
	
}

//knap-sack 응용 총값에서 타겟값 빼는걸로